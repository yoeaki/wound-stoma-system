{"remainingRequest":"D:\\woundStoma\\vue-manage-system-master\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\woundStoma\\vue-manage-system-master\\src\\components\\common\\Home.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\woundStoma\\vue-manage-system-master\\src\\components\\common\\Home.vue","mtime":1589612223674},{"path":"D:\\woundStoma\\vue-manage-system-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\woundStoma\\vue-manage-system-master\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\woundStoma\\vue-manage-system-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\woundStoma\\vue-manage-system-master\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport vHead from './Header.vue';\r\n// import vSidebar from './Sidebar.vue';\r\nimport patientSidebar from '../user/patient/PatientMenu'\r\nimport doctorSidebar from '../user/doctor/DoctorMenu'\r\nimport adminSidebar from '../user/admin/AdminMenu'\r\nimport vTags from './Tags.vue';\r\nimport bus from './bus';\r\nexport default {\r\n    data() {\r\n        return {\r\n            tagsList: [],\r\n            collapse: false,\r\n            role:''\r\n        };\r\n    },\r\n    components: {\r\n        vHead,\r\n        patientSidebar,\r\n        doctorSidebar,\r\n        vTags,\r\n        adminSidebar\r\n    },\r\n    created() {\r\n        bus.$on('collapse-content', msg => {\r\n            this.collapse = msg;\r\n        });\r\n\r\n        this.role = localStorage.getItem('ms_role')\r\n\r\n        // 只有在标签页列表里的页面才使用keep-alive，即关闭标签之后就不保存到内存中了。\r\n        bus.$on('tags', msg => {\r\n            let arr = [];\r\n            for (let i = 0, len = msg.length; i < len; i++) {\r\n                msg[i].name && arr.push(msg[i].name);\r\n            }\r\n            this.tagsList = arr;\r\n        });\r\n    }\r\n};\r\n",{"version":3,"sources":["Home.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;AAqBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Home.vue","sourceRoot":"src/components/common","sourcesContent":["<template>\r\n    <div class=\"wrapper\">\r\n        <v-head></v-head>\r\n        <patient-sidebar v-if=\"role=='0'\"></patient-sidebar>\r\n        <doctor-sidebar v-if=\"role=='1'\"></doctor-sidebar>\r\n        <admin-sidebar v-if=\"role=='2'\"></admin-sidebar>\r\n        <div class=\"content-box\" :class=\"{'content-collapse':collapse}\">\r\n            <v-tags></v-tags>\r\n            <div class=\"content\">\r\n                <transition name=\"move\" mode=\"out-in\">\r\n                    <keep-alive :include=\"tagsList\">\r\n                        <router-view></router-view>\r\n                    </keep-alive>\r\n                </transition>\r\n                <el-backtop target=\".content\"></el-backtop>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport vHead from './Header.vue';\r\n// import vSidebar from './Sidebar.vue';\r\nimport patientSidebar from '../user/patient/PatientMenu'\r\nimport doctorSidebar from '../user/doctor/DoctorMenu'\r\nimport adminSidebar from '../user/admin/AdminMenu'\r\nimport vTags from './Tags.vue';\r\nimport bus from './bus';\r\nexport default {\r\n    data() {\r\n        return {\r\n            tagsList: [],\r\n            collapse: false,\r\n            role:''\r\n        };\r\n    },\r\n    components: {\r\n        vHead,\r\n        patientSidebar,\r\n        doctorSidebar,\r\n        vTags,\r\n        adminSidebar\r\n    },\r\n    created() {\r\n        bus.$on('collapse-content', msg => {\r\n            this.collapse = msg;\r\n        });\r\n\r\n        this.role = localStorage.getItem('ms_role')\r\n\r\n        // 只有在标签页列表里的页面才使用keep-alive，即关闭标签之后就不保存到内存中了。\r\n        bus.$on('tags', msg => {\r\n            let arr = [];\r\n            for (let i = 0, len = msg.length; i < len; i++) {\r\n                msg[i].name && arr.push(msg[i].name);\r\n            }\r\n            this.tagsList = arr;\r\n        });\r\n    }\r\n};\r\n</script>\r\n"]}]}